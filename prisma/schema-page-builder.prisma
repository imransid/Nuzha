generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["linux-musl-arm64-openssl-3.0.x", "linux-arm64-openssl-3.0.x", "debian-openssl-3.0.x", "darwin-arm64"]
  output        = "./generated/page-builder"
}

datasource db {
  provider = "postgresql"
  url      = env("PAGE_BUILDER_DATABASE_URI")
}

model propertyPhotos {
  id           Int          @id @default(autoincrement())
  propertyId   Int
  url          String
  propertyData PropertyData @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt    DateTime     @default(now())
  updateAt     DateTime?    @default(now())
}

model PropertyData {
  id            Int     @id @default(autoincrement())
  title         String
  price         String?
  propertyType  String?
  description   String?
  facility      String?
  location      String?
  longitudeCode String?
  latitudeCode  String?
  country       String?
  street        String?
  city          String?
  postcode      String?
  isActive      Boolean @default(false)
  otherItem     String?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  propertyImage propertyPhotos[]
  booking       Booking[]

  @@index([categoryId])
}

model Booking {
  id                 Int       @id @default(autoincrement())
  booking_date_start DateTime
  booking_date_end   DateTime
  adult_guest        String
  children           String
  cost               String
  createdAt          DateTime  @default(now())
  updateAt           DateTime? @default(now())

  status Boolean?
  userId String?

  contactInfo ContactInfo[]
  paymentInfo PaymentInfo[]

  propertyDataId Int
  propertyData   PropertyData @relation(fields: [propertyDataId], references: [id])
}

model PaymentInfo {
  id             Int       @id @default(autoincrement())
  paymentInfo    String?
  transactionID  String?
  cardholderName String?
  cardName       String?
  experienceDate String?
  userId         Int
  propertyId     Int
  createdAt      DateTime  @default(now())
  updateAt       DateTime? @default(now())

  Booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId Int?
}

model ContactInfo {
  id        Int       @id @default(autoincrement())
  name      String
  email     String
  phone     String
  createdAt DateTime  @default(now())
  updateAt  DateTime? @default(now())

  Booking   Booking? @relation(fields: [bookingId], references: [id])
  bookingId Int?
}

model Category {
  id           Int            @id @default(autoincrement())
  PropertyData PropertyData[]
  name         String
  photo        String
}

model Wallet {
  id Int @id @default(autoincrement())

  wallet_total_balance String
  cardInformation      CardInformation[]
  transaction          Transaction[]

  createdAt DateTime  @default(now())
  updateAt  DateTime? @default(now())
}

model CardInformation {
  id Int @id @default(autoincrement())

  card_holder_name  String
  card_number       String
  card_expired_date DateTime

  wallet   Wallet @relation(fields: [walletID], references: [id])
  walletID Int

  createdAt DateTime  @default(now())
  updateAt  DateTime? @default(now())
}

model Transaction {
  id Int @id @default(autoincrement())

  transaction_receiver_name String
  card_number               String

  wallet           Wallet @relation(fields: [walletID], references: [id])
  walletID         Int
  transaction_type String

  createdAt DateTime  @default(now())
  updateAt  DateTime? @default(now())
}
